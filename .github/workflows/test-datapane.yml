name: Test [Datapane]

on:
  # Run on any push to master and all PRs (any branch)
  push:
    branches: [ master ]
  pull_request:

jobs:
  datapane-multi-env:
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Enable symlinks on Windows
        run: git config --global core.symlinks true
        if: startsWith(runner.os, 'Windows')
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Dump Runner Info
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "${RUNNER_CONTEXT}"
          which python
      - name: set pip cache dir
        run: python -c 'from pip._internal.locations import USER_CACHE_DIR; print(f"PIP_DIR={USER_CACHE_DIR}")' >> ${GITHUB_ENV}
      - name: set python version
        run: python -c 'import sys; print(f"PYTHON_VERSION={sys.hexversion}")' >> ${GITHUB_ENV}
      # TODO - cache the poetry pypi cache dir? (tho as we cache the venv is it needed?)
      - name: Cache .venv
        uses: actions/cache@v2
        with:
          path: projects/python-client/.venv
          key: datapane-venv-v2-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('projects/python-client/poetry.lock') }}
          restore-keys: datapane-venv-v2-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
      - name: Cache pip dir (${{ env.PIP_DIR }})
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_DIR }}
          key: datapane-pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}
          restore-keys: datapane-pip-${{ runner.os }}-
      - name: Run Tests
        working-directory: ./projects/python-client/
        run: |
          pip install "poetry>=1.1.0,<1.2.0"
          poetry config virtualenvs.in-project true
          # rmdir --ignore-fail-on-non-empty -v .venv
          poetry install -E plotting -E cloud
          # Run the type checker
          poetry run python -m mypy projects/python-client/src/datapane/
          # run CLI tests (junit tests not captured yet)
          poetry run python -m pytest -v --ignore=tests/client/e2e/ tests --junitxml=${{github.workspace}}/test-reports/datapane-local-${{ matrix.os }}-${{ matrix.python-version }}.xml
          # run top-level CLI tests (junit tests not captured yet)
          poetry run python -m pytest -v tests_toplevel --junitxml=${{github.workspace}}/test-reports/datapane-local-toplevel-${{ matrix.os }}-${{ matrix.python-version }}.xml
