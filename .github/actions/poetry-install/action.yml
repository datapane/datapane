name: Install Poetry
description: Action for installing Poetry correctly
author: Datapane


inputs:
  poetry-version:
    description: 'Version of Poetry to install'
    default: '1.1.14'
    required: false


outputs: {}


runs:
  using: composite

  steps:
    - name: Configure local binary support Nix
      # This is where Poetry installs to for Nix
      shell: bash
      if: runner.os != 'Windows'
      run: |
        echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"
    - name: Configure local binary support Windows
      # This is where Poetry installs to for Windows
      shell: bash
      if: runner.os == 'Windows'
      run: |
        echo "$(python3 -m site --user-base)/Scripts" >> "$GITHUB_PATH"

    - name: gather preinstall data
      id: preinstall
      shell: python3 {0}
      run: |
        import sys
        print(f"::set-output name=python-version::{sys.hexversion}")

    - name: Poetry Install Cache
      id: cache-poetry-install
      # Only supports the linux paths currently
      if: runner.os == 'Linux'
      uses: actions/cache@v3
      with:
        path: ~/.local/share/pypoetry
        key: cache-poetry-install-v1-${{ runner.os }}-${{ steps.preinstall.outputs.python-version }}-${{ inputs.poetry-version }}

    - name: Install Poetry
      if: steps.cache-poetry-install.outputs.cache-hit != 'true'
      # We use the system python for poetry setup, as setup-python can depend on poetry existing9
      shell: bash
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
      env:
        POETRY_VERSION: '${{ inputs.poetry-version }}'

    - name: Poetry config
      id: poetry-config
      shell: bash
      run: |
        cache_dir="$(poetry config cache-dir)"
        venvs_dir="$(poetry config virtualenvs.path)"

        echo "::set-output name=cache-dir::${cache_dir}"
        echo "::set-output name=virtualenvs-path::${venvs_dir}"


    - name: Cache Poetry Cache
      id: cache-poetry-cache
      uses: actions/cache@v3
      with:
        path: |
          # as far as I can tell, caching the pypoetry artifacts themselves are safe, it's only src packages we are concerned about.
          ${{ steps.poetry-config.outputs.cache-dir }}

          # We explicitly don't cache the global venvs due to poetry not updating git dependencies correctly
          # We also can't just cache everything as the cache will end up including out-of-scope venvs (multi-project setup)
          # This is fine to leave in even if the venvs aren't in the cache directory. Effectively a no-op.
          !${{ steps.poetry-config.outputs.virtualenvs-path }}
        key: cache-poetry-cache-v1-${{ runner.os }}-${{ steps.preinstall.outputs.python-version }}-${{ inputs.poetry-version }}
